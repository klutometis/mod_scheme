* TODO handler function in scheme that receives a =request_rec=
  . . . and returns a status code; see [[http://oss.digirati.com.br/mod_lua/2.0/handler.html][mod_lua]]. if memory serves,
  that's basically what mod_python did.

  check [[http://www.modpython.org/live/current/doc-html/pyapi-handler.html][this]] out:

  #+BEGIN_QUOTE
  A handler function will always be passed a reference to a request
  object. Every handler can return [an HTTP error code]. Handlers can
  send content to the client using the =req.write()= method. Client
  data, such as POST requests, can be read by using the =req.read()=
  function.
  #+END_QUOTE

  Boom: what else do you need? [[http://www.modpython.org/live/current/doc-html/pyapi-apmeth.html][some apache functions]] it exports;
  [[http://www.modpython.org/live/current/doc-html/pyapi-mprequest-meth.html][methods]] and [[http://www.modpython.org/live/current/doc-html/pyapi-mprequest-mem.html][members]] on the =request_rec=.

  [[http://www.modpython.org/live/current/doc-html/pyapi-cookie.html][cookies]], [[http://www.modpython.org/live/current/doc-html/pyapi-util.html][post parameters]], [[http://www.modpython.org/live/current/doc-html/pyapi-sess.html][sessions]]; [[http://www.modpython.org/live/current/doc-html/pyapi-psp.html][python server pages]] were pretty
  cool, too. why not scheme server pages, etc.?

  curious as to how it invoked the python interpreter; some mod_xs
  have max_interpreters, etc. messy to have to worry about that, isn't
  it?

  main [[http://www.modpython.org/live/current/doc-html/dir-handlers-ph.html][request handler]].

  we have to practice calling chicken from c, btw.

  in =mod_python.c=, there are locks, etc.; and a notion of "current
  interpreter." they're dealing with threads and mutexes. =apr_table=
  is interesting, apparently, for persistent storage?

  ah, maybe they're dealing with session locks?

  =python_init= initializes some kind of =py_global_config= that
  persists across restarts; reference to a
  =apr_pool_userdata_{get,set}=; creates mutexes; something about a
  call-back dictionary; interpreters is a dictionary of interpreters
  (keyed by what? weird); registers optional functions about
  interpreter acquisiton and release, also
  {request,server,connection}-objects; [[http://apr.apache.org/docs/apr-util/0.9/group__APR__Util__Opt.html#gb611deabd6e78b5f666071e8cbdcc736][APR_REGISTER_OPTIONAL_FN]]
  registers global functions for later retrieval; are tables used
  mainly for config?; wow, there's an extended =determine_context=
  procedure; cleanup handler; =python_get_request_object= stores the
  object in the =req_config=: interesting; =select_interp_name= by
  name: what does the name signify?; "base interpreter on directory
  where the file is found" if =PythonInterpPerDirectory=; otherwise,
  there's a =PythonInterpreter= which specifies one (this would be a
  location on disk, and not the instantiated interpreter; i take it);
  "default: per server": an interpreter per server?
  (=con->base_server->server_hostname= or
  =req->server->server_hostname=); =python_handler= gets/creates and
  releases an interpreter, apparently, destroying the interpreter's
  state but not the interpreter itself ("release the lock and destroy
  tstate"): this simulates a new state every request; gets a
  =resultobject= from =PyObject_CallMethod= on the dispatch function
  with a request object (something about a callback, though):

  #+BEGIN_SRC c
    resultobject = PyObject_CallMethod(idata->obcallback, "HandlerDispatch",
                                       "O", request_obj);
  #+END_SRC

  it eventually returns some sort of status such as =OK=, =DECLINED=,
  etc.; there's even a =Py_XDECREF=; there's something called
  =MAIN_INTERPRETER=; interesting:

  #+BEGIN_SRC c
    static int PythonHandler(request_rec *req) {
      /*
       * In Apache 2.0, all handlers receive a request and have
       * a chance to process them.  Therefore, we need to only
       * handle those that we explicitly agreed to handle (see 
       * above).
       */
      if (!req->handler || (strcmp(req->handler, "mod_python") &&
                            strcmp(req->handler, "python-program")))
        return DECLINED;
    
      return python_handler(req, "PythonHandler");
    }
  #+END_SRC

  jesus. should we compare =mod_lua= and =mod_scheme=?

  yeah, =mod_scheme= has =max_interps= and =min_interps=; does it
  round-robin? ah, indeed: =scheme_set_output_port_callback=; maybe
  that's related to the =mod_python= callbacks? it then loads the file
  pointed to by =file= with the interpreter, =interp=:

  #+BEGIN_SRC c
    scheme_load_file(interp,file);
    {
      pointer arg_cons = cons(interp,mk_pointer(interp,r),interp->NIL);
      scheme_call_func(interp,"do_service",arg_cons);
    }
  #+END_SRC

  it then releases =interp=, which it got from the pool:

  #+BEGIN_SRC c
    interp = scheme_get_interp(r->pool);
  #+END_SRC

  there's some magic for reading post-data (recall =mod_python's=
  field stuff); whew: on the whole, though, more /prima facie/
  readable than the mature =mod_python=.

  bizarre: =internal.c= has some queue-based shit for getting and
  releasing interpreters; oh, ok, nice: it is round-robin! wow,
  there's some kind of big-ass scheme-initialization in
  =scheme_code.h=.

  yeah, in =scheme_post_config=, it add a bunch of interpreters into
  the queue:

  #+BEGIN_SRC c
    for(i = 0;i < interp_count;i++) {
      interp = apr_pcalloc(pconf,sizeof(scheme));
      scheme_init(interp);
      interp->gc_verbose = 0;
      scheme_load_all_symbols(interp);
      scheme_load_libs(interp,init_dir,plog);
      queue_add(&interp_queue,interp);
     }    
  #+END_SRC

  not sure how it refreshes them, though, once the run out; it appears
  as though =queue_get= actually frees the head: hmm. oh, nice:
  releasing the interpreter adds it back onto the queue:

  #+BEGIN_SRC c
    void scheme_release_interp(scheme *interp) {
      queue_add(&interp_queue,interp);
    }
  #+END_SRC

  if one runs out of interpreters, =scheme_get_interp= returns 0; and
  a 500 status is returned:

  #+BEGIN_SRC c
    interp = scheme_get_interp(r->pool);
    if (interp == 0) {
      ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r,"get_interp failed ");
      return 500;
     }
  #+END_SRC

  how easy would it be to implement something if we ignore the
  interpreter queue for now?

  org-babel for c has a =:flags= parameter, by the way, for passing to
  gcc (i hope); it even adds shit like =#defines=, =#includes= and
  =main=, if necessary (see also =:main= ("yes" or "no")).

  #+BEGIN_SRC c :tangle hello.c
    #include <stdio.h>
    
    int main() { printf("hello"); return 0; }    
  #+END_SRC

  couldn't get it to work, though; maybe we'll have to make-file it,
  after all.

  relationship between interpreters and pools? =interp_queue= is some
  kind of global defined in =internal.h=; and the pool, interestingly
  enough, is attached to =scheme= as =ext_data= (not vice
  versa). (tables do look relevant for config, btw.)

  look at this note from =scheme-private.h=:

  #+BEGIN_SRC c
    void *ext_data;     /* For the benefit of foreign functions */
  #+END_SRC

  it's used, for instance, in =scheme.c= for reading files.

  =callback_data= is interesting, too: it's allocated in the pool
  in the handler.

  rubber meets the road here:

  #+BEGIN_SRC c
    scheme_load_file(interp,file);
    {
      pointer arg_cons = cons(interp,mk_pointer(interp,r),interp->NIL);
      scheme_call_func(interp,"do_service",arg_cons);
    }
  #+END_SRC

  =do_service= is the entry point; it's called with a pair containing
  the interpreter and a pointer (?) to the =request_rec=: effectively
  =(do_service req)=.

  i don't quite understand the callback stuff yet; but it has to do
  with output ports, apparently.

  #+BEGIN_SRC c :tangle test-chicken.c
    #include "httpd.h"
    #include "http_config.h"
    #include "http_protocol.h"
    #include "ap_config.h"
    #include <stdio.h>
    #include <assert.h>
    #include <chicken.h>
    
    extern int handle(request_rec *);
    
    int main (int argc, char **argv) {
      /* long int heap, stack, symbols; */
      /* CHICKEN_parse_command_line(argc, argv, &heap, &stack, &symbols); */
      /* assert(CHICKEN_initialize(heap, */
      /*                           stack, */
      /*                           symbols, */
      /*                           (void *) CHICKEN_default_toplevel) == 1); */
      /* void C_toplevel(C_word x, C_word y, C_word z); */
      C_word chicken = CHICKEN_run(CHICKEN_default_toplevel);
      /* C_word chicken = CHICKEN_run(C_toplevel); */
      C_word result;
      assert(CHICKEN_eval_string("(+ 2 3)", &result));
      assert(C_num_to_int(result) == 5);
      /* not initialized because of an inappropriate toplevel? */
      /* printf("%d", i); */
      C_word *ptr = C_alloc(C_SIZEOF_LIST(1));
      C_word lst, num = C_fix(2);
      lst = C_list(&ptr, 1, C_fix(2));
      request_rec r;
      assert(handle(&r) == -1);
      return 0;
    }
    
  #+END_SRC

  #+BEGIN_SRC scheme :tangle test-chicken-prelude.scm
    (foreign-declare "#include <httpd.h>")
    (define-external
      (handle (c-pointer request_rec))
      int
      (foreign-value "DECLINED" int))
    
  #+END_SRC

  #+BEGIN_SRC makefile
    .PHONY: all
    
    all:
        org-tangle TODO && \
        csc -I/usr/local/apache2/include -e -k -v test-chicken-prelude.scm test-chicken.c && \
        ./test-chicken-prelude
  #+END_SRC

  (now: how to do this from =mod_scheme.c=.)

  hmm: =C_SCHEME_UNBOUND=, btw. also: =C_boundp=.

  #+BEGIN_QUOTE
  This returns true for both regular heterogenous R5RS vectors and
  bytevectors ("blobs"). However, it does not return true for SRFI-4
  vectors, as those are actually bytevectors wrapped in a structure
  with a type tag.
  #+END_QUOTE

  hmm: structures with type-tags; do we have to resort to something
  like this to create the =request_rec= in scheme? see =C_structurep=,
  maybe; =C_taggedpointerp=.

  cf. byteblocks:

  #+BEGIN_QUOTE
  Strings, flonums, bytevectors and lambda-info objects are considered
  "byteblock" objects, as they are not containers for Scheme objects
  but simply point to contiguous memory ranges of bytes.
  #+END_QUOTE

  there's something called a block-header:

  #+BEGIN_SRC c
    if (!C_immediatep(num) && C_block_header(num) == C_FLONUM_TAG) ...
  #+END_SRC

  there's also some sort of static string-buffer thing in =runtime.c=:

  #+BEGIN_SRC c
    static C_TLS C_char buffer[ STRING_BUFFER_SIZE ];
  #+END_SRC

  check this:

  #+BEGIN_SRC c
    void C_ccall C_number_to_string(C_word c, C_word closure, C_word k, C_word num, ...) {
      // ...
      radix = C_strlen(p);
      a = C_alloc((C_bytestowords(radix) + 1));
      radix = C_string(&a, radix, p);
      C_kontinue(k, radix);
    }
  #+END_SRC

  ends the signature with =...=; calls the continuation at the
  end. meanwhile, there's much interaction with =buffer=. =p=, in
  fact, is just a pointer into =buffer= which gets incremented.

  it's also a =C_ccall=; therefore =C_alloc=?

  #+BEGIN_QUOTE
  Allocates memory from the C stack (C_alloc) and returns a pointer to
  it. words should be the number of words needed for all data objects
  that are to be created in this function. Note that stack-allocated
  data objects have to be passed to Scheme callback functions, or they
  will not be seen by the garbage collector. This is really only
  usable for callback procedure invocations, make sure not to use it
  in normal code, because the allocated memory will be re-used after
  the foreign procedure returns.
  #+END_QUOTE

  interesting: =char* C_c_string (C_word string)=; to extract the
  string from a =C_string=, apparently.

  check this:

  #+BEGIN_QUOTE
  These macros and functions can be used to convert Scheme data
  objects back to C data. Note that C_c_string() returns a pointer to
  the character buffer of the actual Scheme object and is not
  zero-terminated.
  #+END_QUOTE

  =C_block_item=:

  #+BEGIN_QUOTE
  This macro can be used to access slots of the non-immediate Scheme
  data object x. index specifies the index of the slot to be fetched,
  starting at 0. Pairs have 2 slots, one for the car and one for the
  cdr. Vectors have one slot for each element.
  #+END_QUOTE

  #+BEGIN_QUOTE
  You can set a variable's value with
  =C_mutate(&C_symbol_value(SYMBOL), VALUE)=.
  #+END_QUOTE

  look at this snippet, even though it uses =C_alloc= without
  callbacks; i think:

  #+BEGIN_SRC c :tangle test-c-alloc.c
    #include <stdio.h>
    #include <chicken.h>
    #include <mcheck.h>
    
    int main(void)
    {
      mtrace();
      
      C_word *mema, *memb, *memresult;
      C_word a, b, result;
    
      mema = C_alloc(C_SIZEOF_FLONUM);
      memb = C_alloc(C_SIZEOF_FLONUM);
      memresult = C_alloc(C_SIZEOF_FLONUM);
      a = C_flonum(&mema, 1.2);
      b = C_flonum(&memb, 4.7);
      result = C_a_i_flonum_plus(&memresult, 2, a, b);
      printf("%lf\n", C_flonum_magnitude(result));
      return 0;
    }
    
  #+END_SRC

  on threads:

  #+BEGIN_QUOTE
  When multiple threads are running concurrently, and control switches
  from one thread to another, then the continuation of the current
  thread is captured and saved. Any pending C stack frame still active
  from a callback will remain on the stack until the threads is
  re-activated again. This means that in a multithreading situation,
  when C callbacks are involved, the available nursery space can be
  smaller than expected. So doing many nested Scheme->C->Scheme calls
  can reduce the available memory up to the point of thrashing. It is
  advisable to have only a single thread with pending C stack-frames
  at any given time.
  #+END_QUOTE

  regarding structures:

  #+BEGIN_QUOTE
  =C_i_structurep [C macro] C_word C_i_structurep(C_word x, C_word s)=

  Is x a structure (record) object with type tag s? This is completely
  safe to use, because it checks whether x is an immediate or not.
  #+END_QUOTE

  there's =##sys#make-structure=; =(##sys#make-structure 'u8vector
  (alloc 'make-u8vector len ext?))=, etc. =C_vector_to_structure=; not
  to mention =C_word C_structure(C_word **ptr, int n, ...)=, =C_word
  C_h_structure(int n, ...)=, =C_word C_a_i_record(C_word **ptr, int
  n, ...)=, =void C_ccall C_make_structure(C_word c, C_word closure,
  C_word k, C_word type, ...)= (callback).

  [[http://wiki.call-cc.org/man/4/Data%20representation][instructive]].
